:PROPERTIES:
:header-args:emacs-lisp: :results none :exports code
:END:

#+title: Config

* Rudimentary configuration
** Confpkg
Clump parts of config into "self-contained packets of functionality"
*** Design
It's already natural to organise blocks of config under sections, and we can use
=:noweb-ref= with a =header-args:emacs-lisp= property to direct all child source
blocks into a single parent. We could have two parents, one tangling to
=subconf/config-X.el= and the other to =config.el=, however this will duplicate
any evaluations required to generate the content, which isn't great
(particularly for things which take a moment, like checking for LaTeX
packages). Instead we can /just/ write to the =subconf/*= files and then at the
end of tangling extract their contents into =config.el=.

To set this up within each section, instead of manually repeating a common form
we can generate the form and supply the relevant section properties via a babel
call keyword, like so:

#+begin_src org
,* Subject

,#+call: confpkg("subject")

,#+begin_src emacs-lisp
;; Code that configures the subject...
,#+end_src
#+end_src
*** Preparation
This approach is built around =#+call= invocations that affect the tangling.
Unfortunately for this use-case, babel call keywords are not executed on tangle.
Tangled noweb blocks /are/ however, and so we can fudge the behaviour we want by
tangling a noweb block to a temp file, with a noweb block that executes babel
calls in the buffer.
#+name: confpkg-prepare
#+begin_src emacs-lisp :noweb no-export
(condition-case nil
    (progn
      (message "Intitialising confpkg")
      (org-fold-core-ignore-fragility-checks
        (org-babel-map-executables nil
          (when (eq (org-element-type (org-element-context)) 'babel-call)
            (org-babel-lob-execute-maybe)))))
  (quit (revert-buffer t t t)))
#+end_src

#+header: :tangle (expand-file-name (make-temp-name "emacs-org-babel-excuses/confpkg-prepare-") temporary-file-directory)
#+begin_src emacs-lisp :noweb no-export :mkdirp yes :export-embed no
<<confpkg-prepare()>>
#+end_src

*** Setup
Before generating the template with babel, we want to keep track of:
+ How many config groups are created
+ Information about each config group

To do this we can simply create two variables. Due to temp-buffer shenanigans,
we'll have to use global variables here.

Then we need to set up the two final phases of this process:
+ Creating =config.el=
+ Cleaning up the superfluous generated content

To trigger the final phases we'll add a hook to ~org-babel-post-tangle-hook~. Once
again, it would be preferred if this was done locally, but it needs to be
global. To avoid this causing headaches down the line we'll make sure when
implementing the hook function to have it remove itself from the hook when
executed.
#+name: confpkg-setup
#+begin_src emacs-lisp :results silent :noweb no-export
(setq confpkg--num 0
      confpkg--list nil)

<<confpkg-dependency-analysis>>
<<confpkg-strip-package-statements>>
<<confpkg-create-config>>
(defun confpkg-cleanup ()
 <<confpkg-cleanup>>
  )
<<confpkg-finaliser>>

<<confpkg-clear-old-files>>

(add-hook 'org-babel-tangle-finished-hook #'confpkg-tangle-finalise)
#+end_src

To avoid generating cruft, it would also be good to get rid of old tangled
config files at the start.
#+name: confpkg-clear-old-files
#+begin_src emacs-lisp
(make-directory "subconf" t)
(dolist (conf-file (directory-files "subconf" t "config-.*\\.el"))
  (delete-file conf-file))
#+end_src

Now to have this take effect, we can just use a babel call keyword. Thanks to
the preparation step this will be executed during tangling.
#+call: confpkg-setup[:results none]()
** Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Aesbetic"
      user-mail-address "aesbetic@gmail.com")
#+END_SRC
** Better defaults
Make changes to the *defaults of core emacs features* here.
*** Simple settings
Small tweaks on top of Doom defaults.
#+BEGIN_SRC emacs-lisp
(setq evil-want-fine-undo t)
#+END_SRC
*** Auto-customizations
Load the custom.el file if it exists.
#+BEGIN_SRC emacs-lisp
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC
*** Frames
Remove the title bar because it's unaesthetic.
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(undecorated-round . t))
#+END_SRC
*** Windows
**** Split prompt
Ask what buffer to switch to after making a new window split because it's a common operation I do.

First make newly-split window the active window
#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+END_SRC
Then, show a buffer prompt
#+BEGIN_SRC emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+END_SRC
**** Window operations
Window rotation is nice, and can be found under SPC w r and SPC w R. Layout rotation is also nice though. Let's stash this under SPC w SPC, inspired by Tmux's use of C-b SPC to rotate windows.
#+BEGIN_SRC emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout)
#+END_SRC
      
I find symbolic keybinds to be more intuitive, so let's add them for window split creation.
#+BEGIN_SRC emacs-lisp
(map! :leader
      "-" #'evil-window-split
      "|" #'evil-window-vsplit)
#+END_SRC
*** Buffers
Enable relative line numbers because it's a habit from vim
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

Make working with wrapped lines easy
#+BEGIN_SRC emacs-lisp
(map!  :nv "j" #'evil-next-visual-line
       :nv "k" #'evil-previous-visual-line)
#+END_SRC

General buffer navigation
#+BEGIN_SRC emacs-lisp
(map!  :m "H" #'evil-beginning-of-visual-line
       :m "L" #'evil-end-of-visual-line
       :m "0" #'evil-window-top
       :m "$" #'evil-window-bottom)
#+END_SRC
*** Files
Bind "<leader>ff" to switch to src/header pair replacing the find-file offered by doom. This is okay because "<leader>." does finding files for me.
#+BEGIN_SRC emacs-lisp
(map! :leader :desc "Find other file" "f f" #'ff-find-other-file)
#+END_SRC
*** TODO Hippie-expand
** Doom configuration
*** Modules
Doom has this lovely modular configuration base that takes a lot of work out of configuring Emacs. Each module (when enabled) can provide a list of packages to install (on doom sync) and configuration to be applied. The modules can also have flags applied to tweak their behaviour.
#+name: init.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :noweb-ref none
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src

**** Structure

* UI
** System
*** TODO Theme: apply rose-pine for the soho vibes :theme:
Load theme, taking current system APPEARANCE into consideration.
#+BEGIN_SRC emacs-lisp
(defun my/apply-theme (appearance)
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'tango t))
    ('dark (load-theme 'doom-lantern t))))
(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+END_SRC
*Note:* I might remove this if it gets dark outside too quick.
*** Fonts
Add Roboto Mono and Source Sans Pro as fixed and variable pitch fonts respectively. I'm choosing not to use "doom-font" to keep things migratable.
#+BEGIN_SRC emacs-lisp
(when (member "Roboto Mono" (font-family-list))
  (set-face-attribute 'default nil :family "Roboto Mono" :height 150)
  (set-face-attribute 'fixed-pitch nil :family "Roboto Mono"))

(when (member "Source Sans Pro" (font-family-list))
  ;; variable pitch font will be a little larger than fixed fonts
(set-face-attribute 'variable-pitch nil :family "Source Sans Pro" :height 1.20))
#+END_SRC
* Org
** Aesthetics
*** Fonts
Set Roboto Mono as header font and resize headings.
#+BEGIN_SRC emacs-lisp
;; Resize Org headings
(dolist (face '((org-level-1 . 1.35)
                (org-level-2 . 1.3)
                (org-level-3 . 1.2)
                (org-level-4 . 1.1)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :family "Roboto Mono" :weight 'bold :height (cdr face)))

;; Make the document title a bit bigger
(set-face-attribute 'org-document-title nil :family "Roboto Mono" :weight 'bold :height 1.8)
#+END_SRC
*** Decluttering
Don't be a litterbug!
#+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation t
      org-hide-leading-stars t
      org-hide-emphasis-markers t  ;; hide markers(bold, italics, etc)
      org-pretty-entities t) ;; allow LaTeX-like syntax to insert special symbols
#+END_SRC
*** Source Blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+END_SRC
*** Org-Superstar
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :hook (org-mode-hook . (lambda () (org-superstar-mode 1)))
  :after org
  :config
  (setq org-superstar-leading-bullet " "
        org-superstar-headline-bullets-list '("●" "○" "◆" "◇" "•" "⚬")
        org-superstar-item-bullet-alist '((42 . "⚬") (43 . "⚬") (45 . "⚬"))
        org-superstar-prettify-item-bullets t)
  #+END_SRC

Plain-list bullets are invisible because they have the org-indent face. We can make them visible by having them inherit the default face.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'org-list-dt nil :inherit 'default)
)
#+END_SRC
** Roam
Make "~/zettelkasten" the org-roam directory
#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/zettelkasten")
#+END_SRC
** Latex Previews
*** Load/Enable
Configure org-latex-preview to be load after org and enable auto-mode which reveals source text under the fragment being pointed to.
#+BEGIN_SRC emacs-lisp
(use-package org-latex-preview
:after org
:hook (org-mode-hook . org-latex-preview-auto-mode)
#+END_SRC

*** Appearance Settings
Basic appearance settings. I've noticed ":scale" doesn't seem to do anything, this could only be for png.
#+BEGIN_SRC emacs-lisp
:config
;; enable latex-previews startup option
(setq org-startup-with-latex-preview t)

;; Increase preview width
(plist-put org-latex-preview-appearance-options
:page-width 1.0)
(plist-put org-latex-preview-appearance-options
:zoom 1.2)

;; enable consistent equation numbering
(setq org-latex-preview-numbered t)
#+END_SRC

*** Latency and Performance
#+BEGIN_SRC emacs-lisp
;; real time previews of latex fagments as you type
(setq org-latex-preview-live t)
(setq org-latex-preview-live-debounce 0.25)  ;; reducing delay before preview

;; png is faster than svg
(setq org-latex-preview-process-default 'dvipng)
)
#+END_SRC

* Keybinds
** Navigation
*** Workspace
Bind workspace navigation to be more like t-smart
#+BEGIN_SRC emacs-lisp
(map! :ni "C-t" #'+workspace/switch-to
      :ni [C-tab] #'+workspace/other)
#+END_SRC
